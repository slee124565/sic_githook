#!/bin/bash
#
#
###########################################################
## Global Management Configure
###########################################################
CRPREmpty_allowed=0
DESCRIPTIONEmpty_allowed=0
CAUSEEmpty_allowed=0
SOLUTIONEmpty_allowed=0
REVIEWEREmpty_allowed=0
SIDEEFFECTEmpty_allowed=0

###########################################################

###########################################################
## Definition
###########################################################
DIGIT="[0-9]"
ALPHA="[a-zA-Z]"
GRAPH=
SPACE=" 	"
DOMAIN="augustatek.com"
CN_DOMAIN="augustatek.com.cn"

###########################################################
## Function
###########################################################
format_required()
{
cat <<EOM
Please write your commit content against the following rules.
[CR/PR]: xxxx [DESCRIPTION]: xxxxxxxx xxxxxx 
[CAUSE]: xxxxxxxx
[SOLUTION]: xxxxxxxx
[REVIEWER]: xxx, yyy  at least two person 
[SIDE-EFFECT]: which area needs to be rechecked. 

EOM
    return 0;
}

check_err()
{
    if [ $? -ne 0 ]
    then
        echo "--------------------------------------------"
        echo "!!! ERR: $*"
        #exit 101
        format_required
        echo "--------------------------------------------"
        exit 1
    #else
        #echo "OK"
    fi
}

###########################################################
#Check Content Format
#[CR/PR]: xxxx  
#[DESCRIPTION]: xxxxxxxx xxxxxx 
#[CAUSE]: xxxxxxxx
#[SOLUTION]: xxxxxxxx
#[REVIEWER]: xxx, xxx  at least two person 
#[SIDE-EFFECT]: which area needs to be rechecked. 
###########################################################
# Check CR/PR
check_CRPR()
{
    #echo "$FUNCNAME"
    if [ ${CRPREmpty_allowed} -eq 0 ]
    then
        #git cat-file commit $1 | sed '1,/^$/d' | grep '^\[CR\]: *[0-9][0-9]*'
        git cat-file commit $1 | sed '1,/^$/d' | grep '^\[CR\/PR\]:[ 	]*[0-9][0-9]*\|^\[CR\]:[ 	]*[0-9][0-9]*\|^\[CR\]: *xxxx\|^\[PR\]:[ 	]*[0-9][0-9]*'
        check_err "Does not match [CR/PR] or the [CR/PR] is empty! [object]:$1"
    else
        git cat-file commit $1 | sed '1,/^$/d' | grep '^\[CR\/PR\]:\|^\[CR\]:\|^\[CR\]:'
        check_err "Does not match [CR/PR]! [object]:$1"
    fi
    return 0
}

# Check DECRIPTION
check_DESCRIPTION()
{
    #echo "$FUNCNAME"
    if [ ${DESCRIPTIONEmpty_allowed} -eq 0 ]
    then
        git cat-file commit $1 | sed '1,/^$/d' | grep '^\[DESCRIPTION\]:[ 	]*[^ 	][^ 	]*'
        check_err "Does not match [DESCRIPTION] or [DESCRIPTION] is empty! [object]:$1"
    else
        git cat-file commit $1 | sed '1,/^$/d' | grep '^\[DESCRIPTION\]:'
        check_err "Does not match [DESCRIPTION]! [object]:$1"
    fi
    return 0
}

# Check CRPR and DESCRIPTION
Check_CRPR_DESCRIPTION()
{
    #echo "$FUNCNAME"
    if [ ${CRPREmpty_allowed} -eq 0 -a ${DESCRIPTIONEmpty_allowed} -eq 0 ]
    then
        #git cat-file commit $1 | sed '1,/^$/d' | grep '^\[CR\]: *[0-9][0-9]*'
        git cat-file commit $1 | sed '1,/^$/d' | grep '^\[CR\]:[ 	]*[0-9][0-9]*[ 	]*\[DESCRIPTION\]:[ 	]*[^ 	][^ 	]*\|^\[PR\]:[ 	]*[0-9][0-9]*[ 	]*\[DESCRIPTION\]:[ 	]*[^ 	][^ 	]*'
        check_err "Does not match [CR/PR] or [DESCRIPTION]! [object]:$1"
    fi

    if [ ${CRPREmpty_allowed} -eq 1 -a ${DESCRIPTIONEmpty_allowed} -eq 0 ]
    then
        git cat-file commit $1 | sed '1,/^$/d' | grep '^\[CR\]:[ 	]*[0-9]*[ 	]*\[DESCRIPTION\]:[ 	]*[^ 	][^ 	]*\|^\[PR\]:[ 	]*[0-9]*[ 	]*\[DESCRIPTION\]:[ 	]*[^ 	][^ 	]*'
        check_err "Does not match [CR/PR] or [DESCRIPTION]! [object]:$1"
    fi

    if [ ${CRPREmpty_allowed} -eq 0 -a ${DESCRIPTIONEmpty_allowed} -eq 1 ]
    then
        git cat-file commit $1 | sed '1,/^$/d' | grep '^\[CR\]:[ 	]*[0-9][0-9]*[ 	]*\[DESCRIPTION\]:[ 	]*[^ 	]*\|^\[PR\]:[ 	]*[0-9][0-9]*[ 	]*\[DESCRIPTION\]:[ 	]*[^ 	]*'
        check_err "Does not match [CR/PR] or [DESCRIPTION]! [object]:$1"
    fi

    if [ ${CRPREmpty_allowed} -eq 1 -a ${DESCRIPTIONEmpty_allowed} -eq 1 ]
    then
        git cat-file commit $1 | sed '1,/^$/d' | grep '^\[CR\]:[ 	]*[0-9]*[ 	]*\[DESCRIPTION\]:[ 	]*[^ 	]*\|^\[PR\]:[ 	]*[0-9]*[ 	]*\[DESCRIPTION\]:[ 	]*[^ 	]*'
        check_err "Does not match [CR/PR] or [DESCRIPTION]! [object]:$1"
    fi
    return 0
}

# Check CAUSE
check_CAUSE()
{
    #echo "$FUNCNAME"
    if [ ${CAUSEEmpty_allowed} -eq 0 ]
    then
        git cat-file commit $1 | sed '1,/^$/d' | grep '^\[CAUSE\]:[ 	]*[^ 	][^ 	]*'
        check_err "Does not match [CAUSE] or [CAUSE] is empty! [object]:$1"
    else
        git cat-file commit $1 | sed '1,/^$/d' | grep '^\[CAUSE\]:'
        check_err "Does not match [CAUSE]! [object]:$1"
    fi
    return 0
}

#  Check SOLUTION
check_SOLUTION()
{
    #echo "$FUNCNAME"
    if [ ${SOLUTIONEmpty_allowed} -eq 0 ]
    then
        git cat-file commit $1 | sed '1,/^$/d' | grep '^\[SOLUTION\]:[ 	]*[^ 	][^ 	]*'
        check_err "Does not match [SOLUTION] or [SOLUTION] is empty! [object]:$1"
    else
        git cat-file commit $1 | sed '1,/^$/d' | grep '^\[SOLUTION\]:'
        check_err "Does not match [SOLUTION]! [object]:$1"
    fi
    return 0
}

# Check REVIEWER
check_REVIEWER()
{
    #echo "$FUNCNAME"
    if [ ${REVIEWEREmpty_allowed} -eq 0 ]
    then
        git cat-file commit $1 | sed '1,/^$/d' | grep '^\[REVIEWER\]:[ 	]*[^ 	][^	]*[ 	]*,[ 	]*[^ 	][^	]*[ 	]*'
        check_err "Does not match [REVIEWER] or [REVIEWER] is empty! [object]:$1"
    else
        git cat-file commit $1 | sed '1,/^$/d' | grep '^\[REVIEWER\]:'
        check_err "Does not match [REVIEWER]! [object]:$1"
    fi
    return 0
}

#  Check SIDE-EFFECT
check_SIDEEFFECT()
{
    #echo "$FUNCNAME"
    if [ ${SIDEEFFECTEmpty_allowed} -eq 0 ]
    then
        git cat-file commit $1 | sed '1,/^$/d' | grep '^\[SIDE-EFFECT\]:[ 	]*[^ 	][^ 	]*'
        check_err "Does not match [SIDE-EFFECT] or [SIDE-EFFECT] is empty! [object]:$1"
    else
        git cat-file commit $1 | sed '1,/^$/d' | grep '^\[SIDE-EFFECT\]:'
        check_err "Does not match [SIDE-EFFECT]! [object]:$1"
    fi
    return 0
}

#  Check FORMAT
check_format()
{
    # echo $1 | grep '^\[CR\/PR\] *(\d\d*)\|^\[CR\] *(\d\d*)\|^\[PR\] *(\d\d*)'
    # check_CRPR        $1
    # check_DESCRIPTION $1
    Check_CRPR_DESCRIPTION  $1
    check_CAUSE             $1
    check_SOLUTION          $1
    check_REVIEWER          $1
    check_SIDEEFFECT        $1
    return 0
}

get_author_name()
{
	#author_name=`git show -s --pretty=medium $1| grep "Author:" | awk '{print $2}'`
	author_name=`git show -s --pretty=medium $1| grep "Author:" | sed -e "s/.*: //;s/ <.*//"`
}


get_author_email()
{
	#author_email=`git show -s --pretty=medium $1 | grep "Author:" | awk '{print $3}' | tr -d \< | tr -d \>`
	author_email=`git show -s --pretty=medium $1 | grep "Author:" | grep -Eiorh "[A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4}"`
}

get_commit_detail()
{
	commit_detail=`git show -s --pretty=medium $1`
	#commit_head=$(echo $commit_detail | sed '1,/^$/!d')
	commit_head=$commit_detail
	author_name=`echo $commit_head | grep "Author:" | sed -e "s/.*Author: //;s/ <.*//"`
	author_email=`echo $commit_head | grep "Author:" | grep -Eiorh "[A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4}"`
	#commit_content=$(echo $commit_detail | sed '1,/^$/d')
	commit_content=$commit_detail
	echo $commit_content | grep -Eiorh '\[CR\]' > /dev/null
	if [ $? -eq 0 ]; then
		commit_type=CR
		cr_num=$(echo $commit_content | sed -e "s/.*\[CR\]://;s/\[DESCRIPTION\]:.*//")
	        cr_num=$(echo $cr_num | sed -e "s/ //")
		cr_pr_num=$cr_num
	else
	        echo $commit_content | grep -Eiorh '\[PR\]' > /dev/null
	        if [ $? -eq 0 ]; then
	                commit_type=PR
			pr_num=$(echo $commit_content | sed -e "s/.*\[PR\]://;s/\[DESCRIPTION\]:.*//")
			pr_num=$(echo $pr_num | sed -e "s/ //")
			cr_pr_num=$pr_num
		fi
	fi

}

###########################################################
## Global Variable
###########################################################
author_name=
author_email=
branch_name=
cr_num=
pr_num=
cr_pr_num=
commit_type=
content=

while read old new name; do
    #local domain=
    #echo "old=$old"
    #echo "new=$new"
    #echo "name=$name"
    branch_name=$(echo $name | sed 's:refs/heads/::')
    #echo $branch_name
    for i in $(git rev-list --reverse ${old}..${new})
    do
        #echo "hello $i"
        #git show -s --pretty=medium $i

        #git show -s --pretty=medium $i | grep 'git-svn-id:' > /dev/null
        #get_author_name  $i
        #get_author_email $i
	get_commit_detail $i
        #echo "commit author name:${author_name}, email:${author_email}, type:$commit_type, PR:$pr_num or CR:$cr_num"

        #content=`git cat-file commit $i | sed '1,/^$/d'`
        #echo "Content: ${content}"
        domain=${author_email##*@}
	if [ "$domain" = "$DOMAIN" ] || [ "$domain" = "$CN_DOMAIN" ]; then
            check_format $i
	    
	    base_dir=$(dirname $0)
	    #echo $base_dir
	    #echo "$base_dir/${branch_name}_branch_req_pr_list"
	    #if [ -f $base_dir/${branch_name}_branch_req_pr_list ]; then
	    if [ -f $base_dir/branch_req_pr_list ]; then
		cat $base_dir/branch_req_pr_list | grep "%$branch_name%" > /dev/null
		if [ $? -eq 0 ]; then
		    	cat $base_dir/branch_req_pr_list | grep %$branch_name% | grep ",$cr_pr_num," > /dev/null
		    	if [ ! $? -eq 0 ]; then
				echo "*** COMMIT FORBIDDEN: $commit_type number $cr_pr_num is not on $branch_name branch allow list"
			    	exit 1
		    	fi
		fi
	    fi
        fi
    done
done
exit 0

